// Code generated by mockery. DO NOT EDIT.

package tweets

import (
	context "context"

	entity "github.com/kordape/tweety/internal/entity"
	mock "github.com/stretchr/testify/mock"

	webapi "github.com/kordape/tweety/internal/tweets/webapi"
)

// MockTwitterWebAPI is an autogenerated mock type for the TwitterWebAPI type
type MockTwitterWebAPI struct {
	mock.Mock
}

// FetchTweets provides a mock function with given fields: _a0, _a1
func (_m *MockTwitterWebAPI) FetchTweets(_a0 context.Context, _a1 webapi.FetchTweetsRequest) ([]entity.Tweet, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []entity.Tweet
	if rf, ok := ret.Get(0).(func(context.Context, webapi.FetchTweetsRequest) []entity.Tweet); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Tweet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, webapi.FetchTweetsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockTwitterWebAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTwitterWebAPI creates a new instance of MockTwitterWebAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTwitterWebAPI(t mockConstructorTestingTNewMockTwitterWebAPI) *MockTwitterWebAPI {
	mock := &MockTwitterWebAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
